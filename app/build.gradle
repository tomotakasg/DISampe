plugins {
    id 'com.android.application'
    id 'kotlin-android'
//    id 'kotlin-android-extensions'
//    id 'kotlin-kapt'
//    id 'dagger.hilt.android.plugin'
}
apply plugin: 'jacoco'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

jacoco {
    toolVersion = "0.8.4"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.disample"
        minSdkVersion 26 //23 内部でinvokeメソッド使っていると、./gradlew :app:jacocoTestReport  で怒られる。。
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
        viewBinding = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            testCoverageEnabled true //jacoco
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    signingConfigs {
//        debug {
//            storePassword "${DEBUG_PASSWORD}"
//            keyAlias "${DEBUG_KEY_ALIAS}"
//            keyPassword "${DEBUG_KEY_PASSWORD}"
//            storeFile file("../debug.keystore")
//        }
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    //jacoco用に追加
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //ktx
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.collection:collection-ktx:1.1.0"
    implementation "androidx.fragment:fragment-ktx:1.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0"
    implementation "androidx.room:room-ktx:2.2.6"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0'
//    implementation 'androidx.lifecycle:lifecycle-extentions:2.2.0'
    //testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'

    /**
     *  外部
     */
    //https://qiita.com/hiesiea/items/d1d8fff1d4a4ed12fbfb
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.squareup.moshi:moshi:1.11.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.11.0'
    implementation 'com.burgstaller:okhttp-digest:2.5'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.11.0'

    //https://aakira.app/blog/2020/05/dagger-hilt/
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"
    def dagger_hilt_view_model_version = "1.0.0-alpha01"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${dagger_hilt_view_model_version}"
    kapt "androidx.hilt:hilt-compiler:${dagger_hilt_view_model_version}"

    // todo:testImplementationでもいい
    //spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$SPEK"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$SPEK"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
    //mock
    testImplementation "io.mockk:mockk:1.9.3"

    //jacoco用に追加   強制的にバージョン適用
    configurations.all {
        resolutionStrategy {
            exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"

        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/*$InjectAdapter.class',
                      '**/*$ModuleAdapter.class',
                      '**/*$ViewInjector*.class']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code-coverage/connected/*coverage.ec'
    ])
}